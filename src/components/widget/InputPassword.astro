---
interface Props {
 id: string,
 placeholder: string
}
const { id, placeholder } = Astro.props
---

<div class="input-password py3em">
  <div class="wfull h-12 relative flex rounded-xl">
    <input
      {id}
      required=""
      class="peer wfull bg-transparent outline-none px-4 text-base rounded-xl bg-global border b-gradientBlue-middle focus:shadow-md"
      type="password"
      title={placeholder}
    />
    <label
      class="select-none cursor-text absolute top-1/2 translate-y-[-50%] bg-normal left-4 px-2 peer-focus:top-0 peer-focus:left-3 font-light text-base peer-focus:text-sm peer-focus:text-gradientBlue-middle peer-valid:-top-0 peer-valid:left-3 peer-valid:text-sm peer-valid:text-gradientBlue-middle duration-150"
      for={id}
      set:text={placeholder}
    />
  </div>
  <div class="hint color-red ml4 mt1"></div>
</div>



<script>
  document.querySelectorAll(".input-password").forEach(el => {
    const hintEl = el.querySelector<HTMLDivElement>(".hint")!
    const passwordEl = el.querySelector("input")! as HTMLInputElement & { wrong:Function, distroy:Function }
    passwordEl.wrong = () => {
      hintEl.innerHTML = "错误的密码！"
    }
    passwordEl.distroy = () => {
      el.outerHTML = ""
    }
    passwordEl.addEventListener("focus", _ => {
      hintEl.innerHTML = ""
    })
    passwordEl.addEventListener("keydown", e => {
      if (e.key == "Enter") {
        passwordEl.dispatchEvent(new Event('submit'))
        e.preventDefault()
      }
    })
  })
</script>

<style>
input[type="password"]::-ms-reveal,
input[type="password"]::-webkit-contacts-auto-fill-button {
  display: none !important;
}
</style>